// Comprender la sintaxis y caracter√≠sticas de las funciones flecha.

// Diferenciar entre funciones tradicionales y funciones flecha.

// Analizar el comportamiento del contexto this en funciones flecha.

// Aplicar funciones flecha en escenarios comunes.



// Funcion tradicional
function calcularArea(radio) {
    return Math.PI * radio * radio;
};


// Equivalente usando funcion flecha
const calcularArea = (radio) => Math.PI * radio * radio;

// üìè Sintaxis concisa ,No es necesario escribir la palabra clave function. La sintaxis es m√°s compacta:
const suma = (a, b) => a + b;


//////////////////////////////////////
// üîÑ Retorno impl√≠cito

// Si la funci√≥n consta de una sola expresi√≥n, return y las llaves {} pueden omitirse:

const resta = (a, b) => a - b;
// üí° Ejemplo con map:

const nombres = ["Ana", "Beto", "Carlos"];
const nombresEnMayusculas = nombres.map(nombre => nombre.toUpperCase());
// eSi la funci√≥n requiere m√∫ltiples l√≠neas, se deben usar llaves y return expl√≠cito.

/////////////////////////////////////////////
//üë§ Manejo de this

// Las funciones flecha heredan el contexto de this del entorno donde fueron definidas, evitando problemas comunes en el uso de this dentro de callbacks:

class Persona {
    constructor(nombre) {
        this.nombre = nombre;
        this.decirNombre = () => console.log(this.nombre);
    }
}

const persona = new Persona("Elena");
persona.decirNombre(); // Imprime "Elena"
//////////////////////////////////////////////////////////////
//üö´ No tienen arguments

// Las funciones flecha no cuentan con el objeto arguments. En su lugar, se pueden utilizar par√°metros Rest:

const sumar = (...numeros) => numeros.reduce((total, num) => total + num, 0);

console.log(sumar(1, 2, 3, 4)); // Imprime 10
//////////////////////////////////////////////////////////////
// üß± No pueden ser utilizadas como constructoras

// Las funciones flecha no pueden ser instanciadas con new:

const Foo = () => {};
// const foo = new Foo(); // Esto generar√≠a un error

